{"version":3,"file":"static/js/246.4926df0d.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/pages/singleComic/SingleComic.js","hooks/storage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import React from 'react'\r\nimport errorImage from './error.gif'\r\nimport './errorMessage.css';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img id=\"errorImage\" src={errorImage} alt=\"OOOOOPS, there there is not a chaaracter with this ID\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import React from 'react'\nimport './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import React, { useState, useEffect } from 'react'\nimport { useParams, Link } from 'react-router-dom';\nimport './singleComic.css';\n\nimport useMarvelService from '../../../services/MarvelService';\nimport Spinner from '../../spinner/Spinner';\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\nimport AppBanner from \"../../appBanner/AppBanner\";\n\n\nconst SingleComic = () => {\n    const { comicId } = useParams();\n    const [comic, setComic] = useState(null);\n    const { loading, error, getComics, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateComic()\n    }, [comicId])\n\n    const updateComic = () => {\n        clearError();\n        getComics(comicId)\n            .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n    return (\n        <>\n            <AppBanner />\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({ comic }) => {\n    const { title, description, pageCount, thumbnail, language, price } = comic;\n\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComic;","class myStorage {\r\n  constructor(key, expire = 1200, storageType = localStorage) {\r\n    this.key = key;\r\n    this.storageType = storageType;\r\n    this.expire = expire;\r\n  }\r\n\r\n  set(value) {\r\n    this.storageType.setItem(this.key, JSON.stringify(value));\r\n  }\r\n\r\n  get() {\r\n    return JSON.parse(this.storageType.getItem(this.key));\r\n  }\r\n\r\n  clear() {\r\n    this.storageType.setItem(this.key, null);\r\n  }\r\n\r\n  /*  isEmpty() {\r\n     if (this.storageType.getItem(this.key) === null || this.storageType.getItem(this.key) === undefined) {\r\n       return true;\r\n     }\r\n     return false;\r\n   } */\r\n\r\n  isEmpty = () => !this.get();\r\n};\r\n\r\nexport default myStorage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp()\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _publicKey = process.env.REACT_APP_MARVEL_API_KEY;\r\n\r\n\r\n  const getAllCharacters = async (offset = 200) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_publicKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacter = async (characterId) => {\r\n    const res = await request(`${_apiBase}characters/${characterId}?apikey=${_publicKey}`)\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (limit = 8, offset = 0) => {\r\n    const res = await request(`${_apiBase}/comics?noVariants=true&limit=${limit}&offset=${offset}&apikey=${_publicKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?apikey=${_publicKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => ({\r\n    id: comics.id,\r\n    title: comics.title,\r\n    description: comics.description || 'There is no description',\r\n    pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n    thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n    language: comics.textObjects.language || 'en-us',\r\n    price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n  })\r\n\r\n\r\n  const _transformCharacter = ({ name, description, thumbnail, urls, id, comics }) => ({\r\n    name, id,\r\n    description: description ? description.length >= 210 ? description.slice(0, 210) + \"...\" : description\r\n      : \"There is no description for this character\",\r\n    thumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n    homepage: urls[0].url,\r\n    wiki: urls[1].url,\r\n    comics: comics.items\r\n  })\r\n\r\n  return { loading, error, getAllCharacters, getCharacter, clearError, getComics, getAllComics }\r\n\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from 'react'\r\nimport myStorage from './storage'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(false)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\r\n    'content-type': 'application/json'\r\n  }) => {\r\n\r\n    setLoading(true)\r\n\r\n    try {\r\n      const urlInStorage = new myStorage(`${url}`);\r\n\r\n      if (urlInStorage.isEmpty()) {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw Error(`Could not fetch ${url}, status: ${response.status} `)\r\n        }\r\n\r\n        const result = await response.json();\r\n\r\n        urlInStorage.set(result)\r\n        return await result;\r\n      }      \r\n      return urlInStorage.get()\r\n\r\n    } catch (error) {\r\n      console.error(error)\r\n      setError(error.message)\r\n      throw error\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  })\r\n\r\n  return { request, error, loading, clearError }\r\n}\r\n\r\n"],"names":["id","src","errorImage","alt","className","avengers","avengersLogo","View","comic","title","description","pageCount","thumbnail","language","price","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComics","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","myStorage","key","expire","storageType","localStorage","isEmpty","get","this","value","setItem","JSON","stringify","parse","getItem","setLoading","setError","request","useCallback","url","method","body","headers","urlInStorage","fetch","response","ok","Error","status","json","result","set","console","message","useHttp","_apiBase","_publicKey","process","getAllCharacters","offset","res","data","results","map","_transformCharacter","getCharacter","characterId","getAllComics","limit","_transformComics","comics","path","extension","textObjects","prices","name","urls","length","slice","homepage","wiki","items"],"sourceRoot":""}