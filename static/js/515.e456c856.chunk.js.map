{"version":3,"file":"static/js/515.e456c856.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/errorWrapper/ErrorWrapper.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/mainPage.js","hooks/scrollLoad.js","hooks/storage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React from 'react'\r\nimport errorImage from './error.gif'\r\nimport './errorMessage.css';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img id=\"errorImage\" src={errorImage} alt=\"OOOOOPS, there there is not a chaaracter with this ID\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import React, { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nexport default class ErrorWrapper extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({ error: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService'\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst RandomChar = React.memo(() => {\n\n    const [char, setChar] = useState(null)\n\n    const { loading, error, getCharacter, clearError } = useMarvelService()\n\n    const personageReloadTimer = useRef()\n\n    useEffect(() => {\n        updateChar();\n        // personageReloadTimer.current = setInterval(() => { updateChar() }, 5000);\n        return () => clearInterval(personageReloadTimer.current);\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const resetInterval = () => {\n        if (personageReloadTimer.current) {\n            clearInterval(personageReloadTimer.current)\n            personageReloadTimer.current = setInterval(() => { updateChar() }, 5000)\n        }\n    }\n\n    const handleNewPrsonageClick = useCallback(() => {\n        resetInterval()\n        updateChar()\n    })\n\n\n    const updateChar = () => {\n        clearError()\n        const id = (Math.random() * (1011400 - 1011000) + 1011000).toFixed();\n        // const id = 1009145;\n\n        getCharacter(id)\n            .then(onCharLoaded)\n\n    }\n\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={handleNewPrsonageClick} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n})\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' }\n\n\n    if (thumbnail && thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className='randomchar__img' style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>)\n}\n\nexport default RandomChar;","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useScroll } from '../../hooks/scrollLoad'\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    const { newItemLoading, setNewItemLoading } = useScroll(onRequest)\r\n\r\n\r\n    const offsetRef = useRef(offset)\r\n    offsetRef.current = offset;\r\n\r\n\r\n    function onRequest(initial) {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offsetRef.current)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    function onCharListLoaded(newCharList) {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    function focusOnItem(id) {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <li\r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n                    <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest()}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import React from 'react';\nimport './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null)\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError()\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght ? null : \"There is no comics for this personage\"}\n\n                {comics.slice(0, 10).map((el, index) => {\n                    return (<li className=\"char__comics-item\" key={index} >\n                        {el.name}\n                    </li>)\n                })}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import React, { useState, useCallback } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";// eslint-disable-line\r\nimport CharList from \"../charList/CharList\";// eslint-disable-line\r\nimport CharInfo from \"../charInfo/CharInfo\";// eslint-disable-line\r\nimport ErrorWrapper from \"../errorWrapper/ErrorWrapper\";\r\n\r\nimport decoration from '../../resources/img/vision.png';// eslint-disable-line\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = useCallback((id) => {\r\n    setChar(id)\r\n  }, [setChar])\r\n\r\n  return (\r\n    <>\r\n      <ErrorWrapper>\r\n        <RandomChar />\r\n      </ErrorWrapper>\r\n      <div className=\"char__content\">\r\n        <ErrorWrapper>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorWrapper>\r\n        <ErrorWrapper>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorWrapper>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default MainPage;","import { useState, useEffect } from 'react'\r\n\r\nexport const useScroll = (hookHandler) => {\r\n  const [newItemLoading, setNewItemLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => window.removeEventListener('scroll', onScroll);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (newItemLoading) hookHandler();\r\n  }, [newItemLoading])\r\n\r\n  const onScroll = () => {\r\n    if (window.innerHeight + window.pageYOffset + 1000 >= document.body.offsetHeight) {\r\n      setNewItemLoading(true);\r\n    }\r\n  };\r\n\r\n  return { newItemLoading, setNewItemLoading }\r\n}","class myStorage {\r\n  constructor(key, expire = 1200, storageType = localStorage) {\r\n    this.key = key;\r\n    this.storageType = storageType;\r\n    this.expire = expire;\r\n  }\r\n\r\n  set(value) {\r\n    this.storageType.setItem(this.key, JSON.stringify(value));\r\n  }\r\n\r\n  get() {\r\n    return JSON.parse(this.storageType.getItem(this.key));\r\n  }\r\n\r\n  clear() {\r\n    this.storageType.setItem(this.key, null);\r\n  }\r\n\r\n  /*  isEmpty() {\r\n     if (this.storageType.getItem(this.key) === null || this.storageType.getItem(this.key) === undefined) {\r\n       return true;\r\n     }\r\n     return false;\r\n   } */\r\n\r\n  isEmpty = () => !this.get();\r\n};\r\n\r\nexport default myStorage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp()\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _publicKey = process.env.REACT_APP_MARVEL_API_KEY;\r\n\r\n\r\n  const getAllCharacters = async (offset = 200) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_publicKey}`);\r\n\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getCharacter = async (characterId) => {\r\n    const res = await request(`${_apiBase}characters/${characterId}?apikey=${_publicKey}`)\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (limit = 8, offset = 0) => {\r\n    const res = await request(`${_apiBase}/comics?noVariants=true&limit=${limit}&offset=${offset}&apikey=${_publicKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?apikey=${_publicKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => ({\r\n    id: comics.id,\r\n    title: comics.title,\r\n    description: comics.description || 'There is no description',\r\n    pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n    thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n    language: comics.textObjects.language || 'en-us',\r\n    price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n  })\r\n\r\n\r\n  const _transformCharacter = ({ name, description, thumbnail, urls, id, comics }) => ({\r\n    name, id,\r\n    description: description ? description.length >= 210 ? description.slice(0, 210) + \"...\" : description\r\n      : \"There is no description for this character\",\r\n    thumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n    homepage: urls[0].url,\r\n    wiki: urls[1].url,\r\n    comics: comics.items\r\n  })\r\n\r\n  return { loading, error, getAllCharacters, getCharacter, clearError, getComics, getAllComics }\r\n\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from 'react'\r\nimport myStorage from './storage'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(false)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\r\n    'content-type': 'application/json'\r\n  }) => {\r\n\r\n    setLoading(true)\r\n\r\n    try {\r\n      const urlInStorage = new myStorage(`${url}`);\r\n\r\n      if (urlInStorage.isEmpty()) {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw Error(`Could not fetch ${url}, status: ${response.status} `)\r\n        }\r\n\r\n        const result = await response.json();\r\n\r\n        urlInStorage.set(result)\r\n        return await result;\r\n      }      \r\n      return urlInStorage.get()\r\n\r\n    } catch (error) {\r\n      console.error(error)\r\n      setError(error.message)\r\n      throw error\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  })\r\n\r\n  return { request, error, loading, clearError }\r\n}\r\n\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["id","src","errorImage","alt","ErrorWrapper","state","error","errorInfo","console","log","this","setState","props","children","Component","RandomChar","React","useState","char","setChar","useMarvelService","loading","getCharacter","clearError","personageReloadTimer","useRef","useEffect","updateChar","clearInterval","current","onCharLoaded","handleNewPrsonageClick","useCallback","setInterval","Math","random","toFixed","then","errorMessage","ErrorMessage","spinner","Spinner","content","View","className","onClick","mjolnir","name","description","thumbnail","homepage","wiki","imgStyle","style","href","charList","setCharList","offset","setOffset","charEnded","setCharEnded","getAllCharacters","useScroll","onRequest","newItemLoading","setNewItemLoading","offsetRef","initial","onCharListLoaded","newCharList","ended","length","itemRefs","focusOnItem","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","lenght","slice","index","charId","skeleton","selectedChar","decoration","hookHandler","window","addEventListener","onScroll","removeEventListener","innerHeight","pageYOffset","document","body","offsetHeight","myStorage","expire","storageType","localStorage","isEmpty","get","value","setItem","JSON","stringify","parse","getItem","setLoading","setError","request","url","method","headers","urlInStorage","fetch","response","ok","Error","status","json","result","set","message","useHttp","_apiBase","_publicKey","process","res","data","results","_transformCharacter","characterId","getAllComics","limit","_transformComics","getComics","title","pageCount","path","extension","language","textObjects","price","prices","urls","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}